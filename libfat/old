int _read_root(){
	int type = fat_type();
	struct info *inf = fat_parse_info();
	struct fat_dirent *dent = malloc(sizeof(struct fat_dirent *));
	if(type < 0x02){
		int first_root_sector = inf->first_data_sector - inf->root_dir_sectors;
		int i = first_root_sector;
		struct fat_bpb *bpb = parse_bpb();
		while(1){
			int cluster_number = ((i - 2) *bpb->sectors_per_cluster) + inf->first_data_sector;
			char *buf = malloc(1024);
			kprintf("Read:LBA %d\n",cluster_number);
			if(ata_read_master(buf,cluster_number,0) < 0)
				break;
			for(int i = 0; i < 16;i++){
				char *tmpbuf = malloc(1024);
				if(buf[i * 32] == 0)
					return 1;
				else{
					if(buf[i * 32] == 0xE5)
						continue;
					else{
						if(buf[i * 32 + 11] == 0x0f){
							for(int j = 0; j < 11;j++)
								tmpbuf[j] = buf[i * 32 + j];
						}
						else{
							for(int j = 0; j < 11;j++)
								dent->fname[j] = buf[i * 32 + j];
							dent->attr = buf[i * 32 + 11];
							dent->create_time = buf[i * 32 + 13];
							dent->time = buf[i * 32 + 14] << 8 | buf[i * 12 + 15];
							dent->date = buf[i * 32 + 16] << 8 | buf[i * 32 + 17];
							dent->lad = buf[i * 32 + 18] << 8 | buf[i * 32 + 19];
							dent->cluster_number_high = buf[i * 32 + 20] << 8 | buf[i * 32 + 21];
							dent->last_modify_time = buf[i * 32 + 22] << 8 | buf[i * 32 + 23];
							dent->last_modify_date = buf[i * 32 + 24] << 8 | buf[i * 32 + 25];
							dent->first_cluster_low = buf[i * 32 + 26] << 8 | buf[i * 32 + 27];
							dent->size_in_bytes = buf[i * 32 + 28] << 24 | buf[i * 32 + 29] << 16 | buf[i * 32 + 30] << 8 | buf[i * 32 + 31];
							kprintf("Parsed Directory:%s\n",dent->fname);
						}
					}
				}
			}
			i++;
		}
	}
	else{
		struct fat32_ebr *ebr = parse_fat32_ebr();
		int root_cluster = ebr->cluster_number;
	}
}
